### Use this file to define Hytools options, including input/output directory, bad bands, etc

[rundirs]
output_dir: /data2/scratch_space/hytools/flexBRDF/
image_dir: /data2/dyang/projects/shrub_elf/council/data/aviris_ng/test_images/
anc_image_dir: /data2/dyang/projects/shrub_elf/council/data/aviris_ng/test_anc

[jsonconfig]
json_config_dir: /data2/sserbin/NGEE_Arctic/hytools_helpers/modex_examples/configs
json_config_name: config_example1.json

[badbands]
bad_bands: [[300,400],[1337,1430],[1800,1960],[2450,2600]]

[imginfo]
extension: img
anc_extension: obs_ort

[parallel]
# options:
#   fixed - set number of CPUs using num_cpus
#   dynamic - based on the number images to process
ptype: dynamic
num_cpus: 

[corrections]
#Specify correction(s) to be applied, corrections will be applied
#in the order they are specified.
#Options include:
#    ['topo']
#    ['brdf']
#    ['glint']
#    ['topo','brdf']
#    ['brdf','topo']
#    ['brdf','topo','glint']
#    [] <---Export uncorrected images
img_corrections: ['brdf','topo']

# Options are 'line','scene', or a float for a custom solar zn
# Custom solar zenith angle should be in radians
brdf_options: 'scene'

# Glint
#Types supported:
#    - hochberg
#    - hedley
#    - gao
#Common reference bands include:
#    - 860nm (NIR)
#    - 1650nm (SWIR)
#    - 2190nm (SWIR)
#The Hedley-specific config would be in the form of:
#[ImagePath]: [y1, y2, x1, x1]
#e.g.:
#config_dict["glint"]["deep_water_sample"] = {
#     "/path_to_image1": [
#        137, 574, 8034, 8470
#     ],
#     "/path_to_image2": [
#        48, 393, 5780, 5925
#     ],
#}
#glint_correction: 'hedley' # or leave blank for no/false
glint_correction:
# !! we should add more of the many, many buried options here!!

[mask]
# format: list naming the type, band centers and band ranges
brdf_mask: ndi
band_1: 850
band_2: 660
min: 0.05
max: 1.0

# path should be path/to/foo
glint_mask_dir: null
glint_mask_ext: cls

[other]
# True/False
wv_resample: False

#Wavelength resampling options - if wv_resample: True
#Types supported:
#   - 'gaussian': needs output waves and output FWHM
#   - 'linear', 'nearest', 'nearest-up',
#      'zero', 'slinear', 'quadratic','cubic': Piecewise
#      interpolation using Scipy interp1d
resampler:
out_waves:
out_fwhm: